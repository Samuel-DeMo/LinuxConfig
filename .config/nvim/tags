!	init.vim	/^inoremap ! !<c-g>u$/;"	m
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
#	init.vim	/^nnoremap # #zz$/;"	m
*	init.vim	/^nnoremap * *zz$/;"	m
,	init.vim	/^inoremap , ,<c-g>u$/;"	m
.	init.vim	/^inoremap . .<c-g>u$/;"	m
<C-c>	init.vim	/^nnoremap <C-c> :cn<CR>$/;"	m
<C-d>	init.vim	/^nnoremap <C-d> :MaximizerToggle!<CR>$/;"	m
<C-e>	init.vim	/^nnoremap <C-e> :NERDTreeFind<CR>$/;"	m
<C-f>	init.vim	/^nnoremap <C-f> :cp<CR>$/;"	m
<C-h>	init.vim	/^nnoremap <C-h> :winc h<CR>$/;"	m
<C-j>	init.vim	/^nnoremap <C-j> :winc j<CR>$/;"	m
<C-k>	init.vim	/^nnoremap <C-k> :winc k<CR>$/;"	m
<C-l>	init.vim	/^nnoremap <C-l> :winc l<CR>$/;"	m
<Down>	init.vim	/^inoremap <Down> <Nop>$/;"	m
<Down>	init.vim	/^nnoremap <Down> <Nop>$/;"	m
<Down>	init.vim	/^vnoremap <Down> <Nop>$/;"	m
<Left>	init.vim	/^cnoremap <Left> <Nop>$/;"	m
<Left>	init.vim	/^inoremap <Left> <Nop>$/;"	m
<Left>	init.vim	/^nnoremap <Left> <Nop>$/;"	m
<Left>	init.vim	/^vnoremap <Left> <Nop>$/;"	m
<Right>	init.vim	/^cnoremap <Right> <Nop>$/;"	m
<Right>	init.vim	/^inoremap <Right> <Nop>$/;"	m
<Right>	init.vim	/^nnoremap <Right> <Nop>$/;"	m
<Right>	init.vim	/^vnoremap <Right> <Nop>$/;"	m
<Tab>	init.vim	/^inoremap <expr> <Tab> pumvisible() ? coc#_select_confirm() : <Tab>""$/;"	m
<Up>	init.vim	/^cnoremap <Up> <Nop>$/;"	m
<Up>	init.vim	/^inoremap <Up> <Nop>$/;"	m
<Up>	init.vim	/^nnoremap <Up> <Nop>$/;"	m
<Up>	init.vim	/^vnoremap <Up> <Nop>$/;"	m
<leader>#	init.vim	/^noremap <silent> <leader># :AsyncRun mcs -out:$(VIM_FILEDIR)\/$(VIM_FILENOEXT) $(VIM_FILEPATH)<cr>$/;"	m
<leader>C	init.vim	/^noremap <silent> <leader>C :AsyncRun g++ -g -Wall -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)\/$(VIM_FILENOEXT)"  -fsanitize=address<cr>$/;"	m
<leader>H	init.vim	/^nnoremap <leader>H :tabprevious<CR>$/;"	m
<leader>L	init.vim	/^nnoremap <leader>L :tabnext<CR>$/;"	m
<leader>b	init.vim	/^nnoremap <leader>b :Telescope buffers<CR>$/;"	m
<leader>c	init.vim	/^noremap <silent> <leader>c :AsyncRun gcc -g -Wall -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)\/$(VIM_FILENOEXT)" -fsanitize=address <cr>$/;"	m
<leader>d_	init.vim	/^nnoremap <leader>d_ :call vimspector#Restart()<CR>$/;"	m
<leader>dd	init.vim	/^nnoremap <leader>dd :call vimspector#Launch()<CR>$/;"	m
<leader>de	init.vim	/^nnoremap <leader>de :call vimspector#Reset()<CR>$/;"	m
<leader>dh	init.vim	/^nnoremap <leader>dh :call vimspector#ToggleBreakpoint()<CR>$/;"	m
<leader>dj	init.vim	/^nnoremap <leader>dj :call vimspector#StepOver()<CR>$/;"	m
<leader>dk	init.vim	/^nnoremap <leader>dk :call vimspector#StepOut()<CR>$/;"	m
<leader>dl	init.vim	/^nnoremap <leader>dl :call vimspector#StepInto()<CR>$/;"	m
<leader>dn	init.vim	/^nnoremap <leader>dn :call vimspector#Continue()<CR>$/;"	m
<leader>drc	init.vim	/^nnoremap <leader>drc :call vimspector#RunToCursor()<CR>$/;"	m
<leader>dx	init.vim	/^nnoremap <leader>dx :call vimspector#ToggleConditionalBreakpoint()<CR>$/;"	m
<leader>fef	init.vim	/^vnoremap <leader>fef :lua require('refactoring').refactor('Extract Function')<CR>$/;"	m
<leader>fev	init.vim	/^vnoremap <leader>fev :lua require('refactoring').refactor('Extract Variable')<CR>$/;"	m
<leader>fevf	init.vim	/^vnoremap <leader>fevf :lua require('refactoring').refactor('Extract Function To File')<CR>$/;"	m
<leader>fi	init.vim	/^vnoremap <leader>fi :lua require('refactoring').refactor('Inline Variable')<CR>$/;"	m
<leader>gcd	init.vim	/^nnoremap <silent> <leader>gcd :Copilot disable<CR>$/;"	m
<leader>gce	init.vim	/^nnoremap <silent> <leader>gce :Copilot enable<CR>$/;"	m
<leader>gcp	init.vim	/^nnoremap <silent> <leader>gcp :Copilot panel<CR>$/;"	m
<leader>gj	init.vim	/^nmap <leader>gj :diffget \/\/3<CR>$/;"	m
<leader>gk	init.vim	/^nmap <leader>gk :diffget \/\/2<CR>$/;"	m
<leader>gs	init.vim	/^nmap <leader>gs :G<CR>$/;"	m
<leader>h	init.vim	/^nnoremap <leader>h :bp<CR>$/;"	m
<leader>j	init.vim	/^noremap <silent> <leader>j :AsyncRun javac $(VIM_FILEPATH)<cr>$/;"	m
<leader>l	init.vim	/^nnoremap <leader>l :bn<CR>$/;"	m
<leader>ma	init.vim	/^nnoremap <leader>ma :make<cr><cr>$/;"	m
<leader>mo	init.vim	/^noremap <silent> <leader>mo :call Mouse()<CR>$/;"	m
<leader>p	init.vim	/^nnoremap <leader>p :Telescope find_files<CR>$/;"	m
<leader>rc	init.vim	/^nnoremap <silent> <leader>rc :e $MYVIMRC<cr>$/;"	m
<leader>se	init.vim	/^noremap <silent> <leader>se :call Unmouse()<CR>$/;"	m
<leader>t	init.vim	/^nnoremap <leader>t :NERDTreeToggle<CR>$/;"	m
<leader>wC	init.vim	/^noremap <silent> <leader>wC :AsyncRun g++ -g -O0 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)\/$(VIM_FILENOEXT)"  <cr>$/;"	m
<leader>wc	init.vim	/^noremap <silent> <leader>wc :AsyncRun gcc -g -O0 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)\/$(VIM_FILENOEXT)" -lm -fsanitize=address <cr>$/;"	m
<leader>x	init.vim	/^nnoremap <leader>x :bd<CR>$/;"	m
<leader>z	init.vim	/^nnoremap <leader>z :call asyncrun#quickfix_toggle(6)<cr>$/;"	m
?	init.vim	/^inoremap ? ?<c-g>u$/;"	m
H	init.vim	/^map H ^$/;"	m
J	init.vim	/^nnoremap J mzJ`z$/;"	m
J	init.vim	/^vnoremap J :m '>+1<CR>gv=gv$/;"	m
K	init.vim	/^vnoremap K :m '<-2<CR>gv=gv$/;"	m
L	init.vim	/^map L \$$/;"	m
Mouse	init.vim	/^function Mouse()$/;"	f
N	init.vim	/^nnoremap N Nzzzv$/;"	m
Q	init.vim	/^nnoremap Q <Nop>$/;"	m
Unmouse	init.vim	/^function Unmouse()$/;"	f
Y	init.vim	/^nnoremap Y y\$$/;"	m
airline#extensions#coc#error_symbol	init.vim	/^let airline#extensions#coc#error_symbol = 'ﲍ' " Show this icon for error in status bar$/;"	v
airline#extensions#coc#warning_symbol	init.vim	/^let airline#extensions#coc#warning_symbol = '' " Show this icon for warning in status bar$/;"	v
c#	init.vim	/^nnoremap c# #``cgN$/;"	m
c*	init.vim	/^nnoremap c* *``cgn$/;"	m
g:NERDTreeDirArrowCollapsible	init.vim	/^let g:NERDTreeDirArrowCollapsible="" " When file open in nerd tree show this icon$/;"	v
g:NERDTreeDirArrowExpandable	init.vim	/^let g:NERDTreeDirArrowExpandable="" " When file not open in nerd tree show this icon$/;"	v
g:airline#extensions#tabline#buffer_nr_show	init.vim	/^let g:airline#extensions#tabline#buffer_nr_show = 1 " Show number of buffer and tab for speed$/;"	v
g:airline#extensions#tabline#enabled	init.vim	/^let g:airline#extensions#tabline#enabled = 1 " Show tab and buffer bar$/;"	v
g:airline#extensions#whitespace#enabled	init.vim	/^let g:airline#extensions#whitespace#enabled = 0 " For beauty just disable unuse space$/;"	v
g:airline_left_sep	init.vim	/^let g:airline_left_sep = ""$/;"	v
g:airline_powerline_fonts	init.vim	/^let g:airline_powerline_fonts = 1 " Enable icons and symbols in bar$/;"	v
g:airline_right_sep	init.vim	/^let g:airline_right_sep = ""$/;"	v
g:airline_section_y	init.vim	/^let g:airline_section_y = 'ඞ' " Disable encoding format in status bar$/;"	v
g:airline_section_z	init.vim	/^let g:airline_section_z = airline#section#create(["\\uE0A1" . '%{line(".")}' . "\\uE0A3" . '%{col(".")}']) " Redesign of the bar for more minimalist line and column counter$/;"	v
g:airline_symbols	init.vim	/^let g:airline_symbols.dirty=' ඞ'$/;"	v
g:airline_theme	init.vim	/^let g:airline_theme='base16_gruvbox_dark_hard' " Make status bar and buffer bar in theme with gruvbox$/;"	v
g:asyncrun_open	init.vim	/^let g:asyncrun_open = 6$/;"	v
n	init.vim	/^nnoremap n nzzzn$/;"	m
paw	init.vim	/^nnoremap paw "_dawP$/;"	m
pi"	init.vim	/^nnoremap pi" "_di"P$/;"	m
pi'	init.vim	/^nnoremap pi' "_di'P$/;"	m
pi(	init.vim	/^nnoremap pi( "_di(P$/;"	m
pi)	init.vim	/^nnoremap pi) "_di)P$/;"	m
piB	init.vim	/^nnoremap piB "_di{P$/;"	m
pib	init.vim	/^nnoremap pib "_di(P$/;"	m
pi{	init.vim	/^nnoremap pi{ "_di{P$/;"	m
pi}	init.vim	/^nnoremap pi} "_di}P$/;"	m
